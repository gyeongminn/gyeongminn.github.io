<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>운영체제 on Gyeongmin의 개발 블로그</title><link>https://gyeongmin.kr/categories/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/</link><description>Recent content in 운영체제 on Gyeongmin의 개발 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko</language><copyright>Gyeongmin Lee</copyright><lastBuildDate>Sun, 01 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://gyeongmin.kr/categories/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/index.xml" rel="self" type="application/rss+xml"/><item><title>프로세스의 개념에 대한 이해</title><link>https://gyeongmin.kr/p/process/</link><pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate><guid>https://gyeongmin.kr/p/process/</guid><description>&lt;img src="https://gyeongmin.kr/images/operating-system.png" alt="Featured image of post 프로세스의 개념에 대한 이해" />&lt;h2 id="프로세스">프로세스&lt;/h2>
&lt;p>간단하게 말하자면, 프로세스는 &lt;strong>실행 중인&lt;/strong> 프로그램을 의미한다.&lt;/p>
&lt;p>프로그램 자체는 단지 명령어가 저장된 파일에 불과한 수동적인 존재이지만, 이것이 메모리에 적재되어 실행될 때 프로그램 카운터와 메모리, 레지스터 같은 자원을 가진 능동적인 존재, 프로세스가 된다.&lt;/p>
&lt;p>프로세스의 현재 활동의 상태는 프로그램 카운터 값과 프로세서 레지스터의 내용으로 나타낸다.&lt;/p>
&lt;h2 id="프로세스의-메모리-구조">프로세스의 메모리 구조&lt;/h2>
&lt;p>&lt;img src="https://gyeongmin.kr/p/process/image.png"
width="1020"
height="700"
srcset="https://gyeongmin.kr/p/process/image_hu7eb73bfae1171d337dccaaf19cfc1c63_60471_480x0_resize_box_3.png 480w, https://gyeongmin.kr/p/process/image_hu7eb73bfae1171d337dccaaf19cfc1c63_60471_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="프로세스 메모리 배치"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;p>프로세스는 메모리에서 다음과 같은 네 가지 주요 섹션으로 나뉜다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>텍스트(Text)&lt;/strong>: 실행할 프로그램 코드가 저장되는 곳으로, 실행 중 크기가 변하지 않는다.&lt;/li>
&lt;li>&lt;strong>데이터(Data)&lt;/strong>: 전역 변수와 같은 데이터가 저장되는 곳으로, 초기화된 데이터와 초기화되지 않은 데이터로 나뉠 수 있다.&lt;/li>
&lt;li>&lt;strong>힙(Heap)&lt;/strong>: 프로세스 실행 중 동적으로 할당되는 메모리가 저장되는 공간으로, 크기가 실행 중에 동적으로 변경된다.&lt;/li>
&lt;li>&lt;strong>스택(Stack)&lt;/strong>: 함수 호출 시 임시 데이터(함수 매개변수, 복귀 주소, 지역 변수 등)를 저장하는 공간으로, 함수 호출 및 복귀에 따라 크기가 변한다.&lt;/li>
&lt;/ul>
&lt;p>스택과 힙 영역이 충돌하지 않도록 운영체제가 관리해야 한다.&lt;/p>
&lt;h2 id="프로세스의-상태-변화">프로세스의 상태 변화&lt;/h2>
&lt;p>&lt;img src="https://gyeongmin.kr/p/process/image-1.png"
width="1562"
height="563"
srcset="https://gyeongmin.kr/p/process/image-1_hu6e1f5563677bb8e903f5c3f6829d7d34_340829_480x0_resize_box_3.png 480w, https://gyeongmin.kr/p/process/image-1_hu6e1f5563677bb8e903f5c3f6829d7d34_340829_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="프로세스의 상태 다이어그램"
class="gallery-image"
data-flex-grow="277"
data-flex-basis="665px"
>&lt;/p>
&lt;p>프로세스는 실행되면서 상태가 변한다. 상태의 이름은 운영체제마다 다를 수 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>New&lt;/strong>: 프로세스가 생성되고 있는 상태.&lt;/li>
&lt;li>&lt;strong>Running&lt;/strong>: 실제 CPU에서 명령어가 수행되는 상태.&lt;/li>
&lt;li>&lt;strong>Waiting&lt;/strong>: 입출력 또는 특정 이벤트가 발생할 때까지 기다리는 상태.&lt;/li>
&lt;li>&lt;strong>Ready&lt;/strong>: 실행될 준비가 되었지만 CPU가 할당되지 않은 상태.&lt;/li>
&lt;li>&lt;strong>Terminated&lt;/strong>: 프로세스의 실행이 종료된 상태.&lt;/li>
&lt;/ul>
&lt;p>운영체제는 이러한 상태를 관리하면서 프로세스가 원활히 수행되도록 한다.&lt;/p>
&lt;h2 id="프로세스-제어-블록pcb">프로세스 제어 블록(PCB)&lt;/h2>
&lt;p>&lt;img src="https://gyeongmin.kr/p/process/image-2.png"
width="857"
height="778"
srcset="https://gyeongmin.kr/p/process/image-2_huf7ce1b934abcffc649ca9eafb0eca96f_206487_480x0_resize_box_3.png 480w, https://gyeongmin.kr/p/process/image-2_huf7ce1b934abcffc649ca9eafb0eca96f_206487_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Process Control Block"
class="gallery-image"
data-flex-grow="110"
data-flex-basis="264px"
>&lt;/p>
&lt;p>프로세스의 모든 정보는 운영체제 내부에서 &lt;strong>PCB(Process Control Block)&lt;/strong> 에 저장된다. PCB는 프로세스의 신분증과 같은 역할을 하며 다음 정보를 포함한다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>프로세스 상태&lt;/strong>: 현재 상태(New, Running, Waiting, Ready, Terminated 등)&lt;/li>
&lt;li>&lt;strong>프로그램 카운터(PC)&lt;/strong>: 다음 실행할 명령어의 주소&lt;/li>
&lt;li>&lt;strong>레지스터 정보&lt;/strong>: CPU 레지스터 상태&lt;/li>
&lt;li>&lt;strong>메모리 관리 정보&lt;/strong>: 메모리 할당 정보(페이지 테이블 등)&lt;/li>
&lt;li>&lt;strong>CPU 스케줄링 정보&lt;/strong>: 프로세스의 우선순위 및 스케줄링 정보&lt;/li>
&lt;li>&lt;strong>입출력 상태 정보&lt;/strong>: 열린 파일 목록 등 프로세스가 사용하는 입출력 자원 정보&lt;/li>
&lt;/ul></description></item><item><title>프로세스의 개념에 대한 이해</title><link>https://gyeongmin.kr/p/process/</link><pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate><guid>https://gyeongmin.kr/p/process/</guid><description>&lt;img src="https://gyeongmin.kr/images/operating-system.png" alt="Featured image of post 프로세스의 개념에 대한 이해" />&lt;h2 id="프로세스">프로세스&lt;/h2>
&lt;p>간단하게 말하자면, 프로세스는 &lt;strong>실행 중인&lt;/strong> 프로그램을 의미한다.&lt;/p>
&lt;p>프로그램 자체는 단지 명령어가 저장된 파일에 불과한 수동적인 존재이지만, 이것이 메모리에 적재되어 실행될 때 프로그램 카운터와 메모리, 레지스터 같은 자원을 가진 능동적인 존재, 프로세스가 된다.&lt;/p>
&lt;p>프로세스의 현재 활동의 상태는 프로그램 카운터 값과 프로세서 레지스터의 내용으로 나타낸다.&lt;/p>
&lt;h2 id="프로세스의-메모리-구조">프로세스의 메모리 구조&lt;/h2>
&lt;p>&lt;img src="https://gyeongmin.kr/image.png"
loading="lazy"
alt="프로세스 메모리 배치"
>&lt;/p>
&lt;p>프로세스는 메모리에서 다음과 같은 네 가지 주요 섹션으로 나뉜다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>텍스트(Text)&lt;/strong>: 실행할 프로그램 코드가 저장되는 곳으로, 실행 중 크기가 변하지 않는다.&lt;/li>
&lt;li>&lt;strong>데이터(Data)&lt;/strong>: 전역 변수와 같은 데이터가 저장되는 곳으로, 초기화된 데이터와 초기화되지 않은 데이터로 나뉠 수 있다.&lt;/li>
&lt;li>&lt;strong>힙(Heap)&lt;/strong>: 프로세스 실행 중 동적으로 할당되는 메모리가 저장되는 공간으로, 크기가 실행 중에 동적으로 변경된다.&lt;/li>
&lt;li>&lt;strong>스택(Stack)&lt;/strong>: 함수 호출 시 임시 데이터(함수 매개변수, 복귀 주소, 지역 변수 등)를 저장하는 공간으로, 함수 호출 및 복귀에 따라 크기가 변한다.&lt;/li>
&lt;/ul>
&lt;p>스택과 힙 영역이 충돌하지 않도록 운영체제가 관리해야 한다.&lt;/p>
&lt;h2 id="프로세스의-상태-변화">프로세스의 상태 변화&lt;/h2>
&lt;p>&lt;img src="https://gyeongmin.kr/image-1.png"
loading="lazy"
alt="프로세스의 상태 다이어그램"
>&lt;/p>
&lt;p>프로세스는 실행되면서 상태가 변한다. 상태의 이름은 운영체제마다 다를 수 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>New&lt;/strong>: 프로세스가 생성되고 있는 상태.&lt;/li>
&lt;li>&lt;strong>Running&lt;/strong>: 실제 CPU에서 명령어가 수행되는 상태.&lt;/li>
&lt;li>&lt;strong>Waiting&lt;/strong>: 입출력 또는 특정 이벤트가 발생할 때까지 기다리는 상태.&lt;/li>
&lt;li>&lt;strong>Ready&lt;/strong>: 실행될 준비가 되었지만 CPU가 할당되지 않은 상태.&lt;/li>
&lt;li>&lt;strong>Terminated&lt;/strong>: 프로세스의 실행이 종료된 상태.&lt;/li>
&lt;/ul>
&lt;p>운영체제는 이러한 상태를 관리하면서 프로세스가 원활히 수행되도록 한다.&lt;/p>
&lt;h2 id="프로세스-제어-블록pcb">프로세스 제어 블록(PCB)&lt;/h2>
&lt;p>&lt;img src="https://gyeongmin.kr/image-2.png"
loading="lazy"
alt="Process Control Block"
>&lt;/p>
&lt;p>프로세스의 모든 정보는 운영체제 내부에서 &lt;strong>PCB(Process Control Block)&lt;/strong> 에 저장된다. PCB는 프로세스의 신분증과 같은 역할을 하며 다음 정보를 포함한다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>프로세스 상태&lt;/strong>: 현재 상태(New, Running, Waiting, Ready, Terminated 등)&lt;/li>
&lt;li>&lt;strong>프로그램 카운터(PC)&lt;/strong>: 다음 실행할 명령어의 주소&lt;/li>
&lt;li>&lt;strong>레지스터 정보&lt;/strong>: CPU 레지스터 상태&lt;/li>
&lt;li>&lt;strong>메모리 관리 정보&lt;/strong>: 메모리 할당 정보(페이지 테이블 등)&lt;/li>
&lt;li>&lt;strong>CPU 스케줄링 정보&lt;/strong>: 프로세스의 우선순위 및 스케줄링 정보&lt;/li>
&lt;li>&lt;strong>입출력 상태 정보&lt;/strong>: 열린 파일 목록 등 프로세스가 사용하는 입출력 자원 정보&lt;/li>
&lt;/ul></description></item><item><title>인터럽트의 개념과 분류, 처리 과정에 대하여</title><link>https://gyeongmin.kr/p/interrupt/</link><pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate><guid>https://gyeongmin.kr/p/interrupt/</guid><description>&lt;img src="https://gyeongmin.kr/images/operating-system.png" alt="Featured image of post 인터럽트의 개념과 분류, 처리 과정에 대하여" />&lt;h2 id="인터럽트">인터럽트&lt;/h2>
&lt;p>인터럽트는 컴퓨터 시스템에서 비동기적 이벤트를 처리하는 중요한 메커니즘이다.&lt;/p>
&lt;p>하드웨어 장치나 외부 이벤트가 발생할 때, CPU가 현재 작업을 중단하고 새로운 작업을 처리하도록 유도한다.&lt;/p>
&lt;p>예를 들어, 키보드 입력이나 디스크 작업 완료 등의 사건이 발생하면 해당 장치 컨트롤러는 인터럽트를 발생시킨다.&lt;/p>
&lt;h2 id="인터럽트-처리-과정">인터럽트 처리 과정&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>CPU가 인터럽트를 수신하면 실행 중이던 프로그램의 작업을 즉시 중단한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>인터럽트 번호를 인터럽트 벡터의 인덱스로 사용하여 ISR(Interrupt Service Routine)의 시작 주소를 가져온다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CPU는 PC(Program Counter) 및 레지스터 상태를 스택에 저장하여 보관하고, ISR 코드가 위치한 주소로 제어를 넘긴다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>진행 중인 프로그램의 레지스터 값들도 스택 또는 지정된 저장 공간에 대피시킨다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ISR(인터럽트 서비스 루틴)이 실행되어 요청된 작업을 처리한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ISR 작업이 끝나면, CPU는 스택에서 이전 프로그램의 레지스터 상태와 PC 값을 복원한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IRET(Interrupt Return) 명령어를 실행하여 원래의 프로그램 수행 위치로 복귀한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="인터럽트-분류">인터럽트 분류&lt;/h2>
&lt;p>인터럽트는 크게 세 가지 종류로 나눌 수 있다.&lt;/p>
&lt;h3 id="내부-인터럽트-internal-interrupt-exception">내부 인터럽트 (Internal Interrupt, Exception)&lt;/h3>
&lt;p>내부 인터럽트는 CPU가 명령어를 실행하는 도중에 내부적으로 발생하는 인터럽트다.
크게 트랩(Trap)과 폴트(Fault), 어보트(Abort) 세 가지 유형으로 나뉜다.&lt;/p>
&lt;h4 id="트랩-trap">트랩 (Trap)&lt;/h4>
&lt;p>프로그래머가 의도적으로 만든 인터럽트. 주로 디버깅 또는 특정 시스템 콜 호출 시 사용된다.&lt;/p>
&lt;ul>
&lt;li>breakpoint(중단점)&lt;/li>
&lt;/ul>
&lt;h4 id="폴트-fault">폴트 (Fault)&lt;/h4>
&lt;p>실행 중인 명령어에서 오류가 발생하여 이를 바로잡기 위해 발생한다. 문제가 해결되면 다시 명령을 재실행할 수 있다.&lt;/p>
&lt;ul>
&lt;li>페이지 폴트(Page Fault)&lt;/li>
&lt;li>일반 보호 예외(General Protection Fault)&lt;/li>
&lt;/ul>
&lt;h4 id="어보트-abort">어보트 (Abort)&lt;/h4>
&lt;p>프로그램의 심각한 오류가 발생해 복구할 수 없을 때 CPU가 강제로 실행을 중단시키기 위한 인터럽트이다. 일반적으로 프로그램 종료로 이어진다.&lt;/p>
&lt;ul>
&lt;li>더블 폴트(Double Fault)&lt;/li>
&lt;/ul>
&lt;h3 id="외부-인터럽트-external-interrupt-hardware-interrupt">외부 인터럽트 (External Interrupt, Hardware Interrupt)&lt;/h3>
&lt;p>컴퓨터 시스템 외부의 하드웨어 장치가 발생시키는 인터럽트다.
예를 들어, 키보드 입력, 마우스 클릭, 타이머 시간 초과, 디스크 입출력 완료 등이 해당된다.&lt;/p>
&lt;ul>
&lt;li>타이머 인터럽트: 정기적으로 일정 시간 간격마다 CPU에게 인터럽트를 발생시켜 작업을 전환하게 해준다.&lt;/li>
&lt;li>입출력 장치 인터럽트: 키보드, 마우스 등 주변 장치 입력 처리&lt;/li>
&lt;/ul>
&lt;h3 id="소프트웨어-인터럽트-software-interrupt">소프트웨어 인터럽트 (Software Interrupt)&lt;/h3>
&lt;p>소프트웨어가 의도적으로 명령어로 인터럽트를 발생시키는 경우다.
주로 운영체제 서비스 호출이나 시스템 호출(system call)을 요청할 때 사용된다.&lt;/p>
&lt;ul>
&lt;li>시스템 콜 인터럽트: 사용자 프로그램이 운영체제의 특정 기능을 사용하고자 인터럽트를 발생시킨다. (예: INT 0x80 리눅스 시스템 콜)&lt;/li>
&lt;/ul>
&lt;h3 id="인터럽트의-우선순위">인터럽트의 우선순위&lt;/h3>
&lt;p>인터럽트가 여러 개 동시에 발생하면 CPU는 인터럽트의 우선순위(priority)에 따라 처리 순서를 결정한다. 일반적으로 더 중요하거나 긴급한 인터럽트가 우선 처리된다.&lt;/p>
&lt;p>예를 들어, 타이머 인터럽트는 낮은 우선순위를 가질 수 있지만, 치명적인 하드웨어 오류를 나타내는 인터럽트(예: 더블 폴트)는 높은 우선순위를 가진다.&lt;/p>
&lt;h3 id="인터럽트-종류">인터럽트 종류&lt;/h3>
&lt;table style="width: 50%; min-width: 24rem; margin: 0 auto; border-collapse: collapse;">
&lt;thead>
&lt;tr>
&lt;th style="border: 1px solid black; padding: 8px;">벡터 번호&lt;/th>
&lt;th style="border: 1px solid black; padding: 8px;">설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">0&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">나눗셈 에러&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">1&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">디버그 예외&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">2&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">Null 인터럽트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">3&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">중단점(breakpoint)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">4&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">INTO-검출 오버플로&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">5&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">제한 범위 예외&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">6&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">유효하지 않은 opcode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">7&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">장치 사용하지 않음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">8&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">더블 폴트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">9&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">부처리기 세그먼트 침범(예약됨)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">10&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">유효하지 않은 태스크 상태 세그먼트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">11&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">존재하지 않는 세그먼트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">12&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">스택 폴트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">13&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">일반 보호&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">14&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">페이지 폴트&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="border: 1px solid black; padding: 8px;">32-255&lt;/td>
&lt;td style="border: 1px solid black; padding: 8px;">Maskable 인터럽트&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>